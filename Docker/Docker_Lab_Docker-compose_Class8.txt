Docker-compose
===============

Docker compose is a python application

Docker compose used to orchestrate one or more Docker containers on a single instance

Uses a YAML file , typically called docker-compose.yml , for its instruction

Can automate and save a lot of typing and memorizing , by saving the state of the container saving.

install the package and discover the basic package

Docker Installation
====================

Create a ubuntu ec2 instance

apt-get update -y
apt-get install docker.io -y

service docker start
service docker status

apt install docker-compose  ( Install docker-compose)

docker --version
docker version

docker-compose --version


Docker-compose Fundamnetal
-------------------------

docker-compose installation process
-----------------------------------

https://docs.docker.com/compose/install/

click on Linux Tab

sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose


sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version



To build the docker-compose file

docker-compose build

To start  the service from the docker-compose file 

docker-compose up

To start them in detached mode 

docker-compose up -d 

To stop the services 

docker-compose stop

docker-compose down

docker-compose ps

docker-compose ps -a

docker-compose stop

docker rmi $(docker images -q) ( To remove all the images)

docker rm $(docker ps -a -q) --force ( To remove all the container)

usecase - 1
------------

setting up a developement environment here mysql container is linked with wordpress container.

First element is version . here major version is 3

second element is services  which contain two container 'mydb' and 'wordpress'

To start the 'mydb' container  we specify the image 'mysql'. Then we passed some environment variable.

To start the second container 'mywordpress' and to start the container we specify the image 'wordpress'.

Then we specify the port mapping '5050' linked with 80 . And this container should linked with database container

here database container is 'mydb' and alias is 'mysql' . For alias there will be no space.


Note: some of the child elements contain hyphen '-' and some of the element does not contain hyphen '-'

There are two types of element that can stored in yaml file. one is called single element which contain one elements.
where as other elments called as 'dictonary object' which can contain multiple items with hyphen '-'


mkdir mysql
cd mysql

vi docker-compose.yml

---
version: '3'

services:
 mydb:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: test1234

 mywordpress:
  image: wordpress
  ports:
   - 5050:80
  links:
   - mydb:mysql

...

	

docker-compose up -d 

docker container ls

open the browser

public ipaddress of ec2:5050  ( for wordpress)

docker-compose stop

docker-compose down


usecase - 2
------------

For setting up a CI/CD environment where jenkins container is linked with two tomcat container.

mkdir jenkins
cd jenkins

vi docker-compose.yml

---
version: '3'
services:
 devserver:
  image: jenkins/jenkins:lts
  ports:
   - 5050:8080

 qaserver:
  image: tomcat:9.0
  ports:
   - 6060:8080
  links:
   - devserver:jenkins

 prodserver:
  image: tomcat:9.0
  ports:
   - 7070:8080
  links:
   - devserver:jenkins

...


save the file 

docker-compose up -d

Now open the browser

public ipaddress of ec2:5050  ( for jenkins)

public ipaddress of ec2:6060  ( for tomcat qa server)

public ipaddress of ec2:7070  ( for tomcat prod server)





usecase -1 ( MySQL with wordpress Application)
-----------------------------------------------

vi docker-compose.yml



version: '3.3'

services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
       WORDPRESS_DB_NAME: wordpress
volumes:
    db_data: {}
	
	

docker-compose up -d

https://ipaddress of ec2 machine:8000

username - wordpress
password - wordpress




usecase- 2
-----------

SKD Corporation has been migrating some of their bare metal infrastructure to Docker containers. Your team wants to find an easier way to deploy applications that consist of multiple containers and has decided to use Docker Compose. You have been tasked with setting up an internal blog so the team can write technical articles. This blog will consist of two services: a tech Blog service and a MySQL service. Both services will use volumes for persistent storage.


Create a Tech Blog and MySQL Service

vi docker-compose.yml

version: '3'
services:
  ghost:
    image: ghost:1-alpine
    container_name: ghost-blog
    restart: always
    ports:
      - 80:2368
    environment:
      database__client: mysql
      database__connection__host: mysql
      database__connection__user: root
      database__connection__password: test1234
      database__connection__database: ghost
    volumes:
      - ghost-volume:/var/lib/ghost
    depends_on:
      - mysql

  mysql:
    image: mysql:5.7
    container_name: ghost-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: test1234
    volumes:
      - mysql-volume:/var/lib/mysql

volumes:  
  ghost-volume:  
  mysql-volume:  
  
  
----------------------

docker-compose up -d

docker ps

open the public IP address of ec2 instance in open the browser.

you will able to see the website






usecase - 4 ( update docker-compose container dynamically using volume)
-------------------------------------------

With Docker Compose though, we used volumes in a different way. This time, we connected specific directories on the host machine to ones in our container services. With the volumes for our node and php services set up, we gave ourselves the ability to dynamic update our compose application as we saved and edited files in the application.

https://github.com/awsdevops009/docker-guides.git

Go to node-php-volumes folder

docker-compose build

docker-compose up -d

open the browser and open the website

public IP of ec2 instance:5000

No go to server.js file under player folder and modify some names in the file

and go to the browser and refresh the website

automatically , all the names will display in the browser.

Go inside the container

docker exec -it  <container Id> bash




https://github.com/awsdevops009/docker-project.git



------------------
docker-compose build
docker-compose up
docker-compose up â€“d
docker-compose ps
docker-compose stop





Docker-compose installation
----------------------------

choose the Linux

https://docs.docker.com/compose/install/

Run this command to download the current stable release of Docker Compose:

sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

Apply executable permissions to the binary:

sudo chmod +x /usr/local/bin/docker-compose

sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose