
Kubernetes Object Management
============================

kubectl is a command line tool for Kubernetes.

kubectl uses the K8s API Internally to carryout the command. Whenever  we use kubectl command from the command line , kubectl basically interally hit the kubernetes Rest API and it will carry out the command via Rest API and do the required work.

- kubectl get -> Kubectl get is used to get the object , presents in K8s cluster. 
- kubectl describe -> You can get detailed Information about any Kubernetes Object.
- kubectl create -> You can create any K8s Object using Kubectl create. File descriptor must be YAML.
- kubectl apply ->  Kubectl apply is similar to Kubectl create. if user use kubectl apply on already existing object. it will modify the existing object, if possible.

- kubectl delete -> Kubectl delete , deletes the object from k8s Cluster.
- kubectl exec -> Kubectl exec , used to run command inside container



vi podtest.yaml

apiVersion: v1
kind: Pod
metadata:
    name: draining-node-test-pod
    labels:
        tier: frontend
spec:
    containers:
    - name: nginx
      image: nginx:latest
      ports:
      - containerPort: 80
    restartPolicy: OnFailure
	
	
kubectl	create -f podtest.yaml

kubectl api-resources  ( These are the list of resources kubernetes supports.)

kubectl get pods
kubectl get po ( execute with short name of pod)

kubectl get pods draining-node-test-pod

kubectl get pods -n kube-system ( These are the list of pods running on kube-system namespace)

kubectl get pods draining-node-test-pod -o wide

kubectl get pods draining-node-test-pod -o json ( output will display in json format)

kubectl describe pods draining-node-test-pod

kubectl exec draining-node-test-pod -c nginx -- cat /etc/nginx/nginx.conf  ( The output of this file pulled from within the container)

kubectl delete  pods draining-node-test-pod


Working with Kubectl
====================

Create a pod.

vi pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: busybox
    image: radial/busyboxplus:curl
    command: ['sh', '-c', 'while true; do sleep 3600; done']
	

kubectl apply -f pod.yml

Get a list of pods.

kubectl get pods

kubectl get pods -o wide
kubectl get pods -o json
kubectl get pods -o yaml

kubectl get pods -o wide --sort-by .spec.nodeName

Filter results by a label.

kubectl get pods -n kube-system --selector k8s-app=calico-node

kubectl describe pod my-pod

Test create/apply. Note that create will only work if the object does not already exist.

kubectl create -f pod.yml

kubectl apply -f pod.yml

Execute a command inside a pod

kubectl exec my-pod -c busybox -- echo "Hello, world!"

Delete a pod.

kubectl delete pod my-pod	


More on kubectl
---------------

https://kubernetes.io/docs/reference/kubectl/cheatsheet/


Run kubectl create to see a list of objects that can be created with imperative commands.

kubectl create

Create a deployment imperatively.

kubectl create deployment my-deployment --image=nginx

Do a dry run to get some sample yaml without creating the object.



kubectl create deployment my-deployment --image=nginx --dry-run=client -o yaml

Save the yaml to a file.


kubectl create deployment my-deployment --image=nginx --dry-run=client -o yaml > deployment.yml

cat deployment.yml

Now changes the deployment.yml file as per your requirement then create the file or apply the file.

Create the object using the file.

kubectl create -f deployment.yml




managing Kubernetes role-based access control (RBAC)
=============================================

what is role-based access control and Kubernetes?

Role-based access control allows you to control what users are allowed to do and access within your Kubernetes cluster. So for example,
you can use role-based access control to allow developers to read metadata and logs from your pods without allowing them to make changes to the pods.

RBAC Object
------------
- Role
- ClusterRole
- RoleBinding
- ClusterRoleBinding


Roles and cluster roles are both Kubernetes objects that define a set of permissions, and these permissions define something that users are allowed to do within the cluster.

what is the difference between roles and cluster roles?

While a role defines permissions specifically within a particular namespace. A cluster role on the other hand defines cluster wide
permissions that are not specific to a namespace.

So a role can allow users to view information about pods within a namespace. A cluster role, on the other hand, could allow users to view information about all pods in the cluster, regardless of namespace.

Role based access control are Rolebindings
------------------------------------------

The other two objects you need to be aware of when it comes to role based access control are rolebindings and clusterrolebindings.

Rolebindings are objects that link users to roles and clusterrolebindings link users to cluster roles. So role and cluster role defined permissions that users are allowed to perform rolebindings and clusterrolebindings determine which users are allowed to use the permissions that are defined in the role and the cluster role.


Create a Role spec file.


Roles and cluster roles look pretty similar. The only real difference is Role having a namespace and cluster roles wouldn't have a namespace,
and  the kind would be cluster role.

Below example defining a set of resources. called  pods and pods/log. Pods/log is used to provide access to view the logs from our pods containers.

allow a set of verbs get, watch, and list. They able to get, watch, and list pods as well as pod container logs.


vi role.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "watch", "list"]
  
Create the Role

kubectl apply -f role.yml

kubectl get role


Bind the role to the dev user.

vi rolebinding.yml


apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader
  namespace: default
subjects:
- kind: User
  name: dev
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io




Create the RoleBinding

kubectl apply -f rolebinding.yml  



Kubernetes Services
===================

What is a ServiceAccount
--------------------------

- In K8s , Service Account used by container process to Authenticate with K8s APIs.


suppose you are putting some monitoring tool on your kubernetes cluster , and to get the kubernetes cluster status , that monitroing tools needs to be hit some kubernetes API . In that case first you need to create a service account and you need to assign the  service account to these pods , where that monitoring service tool process  will execute.

- If Pods needs to communicate with K8s APIs. user need to setup service account to control the access of kubernetes API.


While deployments provide a great way to automate the management of your pods, you need a way to easily communicate with the dynamic set of replicas managed by a deployment. This is where services come in. 

Services: Services are another important component of deploying apps with kubernetes.

Services allow you to dynamically access a group of replica pods.pods are constantly creating and destroying . Replica pods are often being created and destroyed, so what happens to other pods or external entities which need to access these pods. 

A service create an abstraction layer on top of a set of replica pods. You can access the service rather than accessing the pods directly, so as pods come and go , you get uninterrupted , dynamic access to whatever replicas are up at the time.

https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

https://kubernetes.io/docs/reference/access-authn-authz/rbac/


kubectl get serviceaccounts

kubectl get sa

kubectl create ns development

kubectl get serviceaccounts -n development

kubectl get serviceaccounts -n kube-system ( you can see lots of service-account)

Create a basic ServiceAccount.
--------------------------------
A Service account object can be created with some YAML just like any other K8s object.

vi my-serviceaccount.yml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-serviceaccount

kubectl create -f my-serviceaccount.yml

Create a another ServiceAccount with an imperative command.

kubectl create sa my-serviceaccount2 -n default

View your ServiceAccount.
kubectl get sa

To delete the ServiceAccount

kubectl delete sa <ServiceAccount Name>

kubectl delete sa my-serviceaccount

Binding Roles to Service Account
------------------------------

you can manage access control for service accounts , just like any other user , using RBAC Object.

Attach a Role to the ServiceAccount with a RoleBinding.

vi sa-pod-reader.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sa-pod-reader
  namespace: default
subjects:
- kind: ServiceAccount
  name: my-serviceaccount
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
  

kubectl create -f sa-pod-reader.yml

Get additional information for the ServiceAccount.

kubectl describe sa my-serviceaccount  

To delete the service 

kubectl get svc
kubectl delete service <service name>
kubectl delete service nginx-service


what is a service?
===================

A Kubernetes service provides a way to expose an application running as a set of pods. It is basically providing an abstract way for clients to access our applications.

So a service is just an abstraction layer that allows our clients to communicate with the service rather than communicating with those individual pods.

Whenever a client makes a request to a service, the service routes traffic to the underlying pods in a load balanced fashion.

our client makes a request to a service, which is then routed to a pod, and then subsequent requests are going to be load balanced to different pods.

So basically the client doesn't have to think about which pod it's communicating with. It doesn't even need to be aware of the fact that there are multiple pods.
It's just communicating with that service,and the service is handling all of the routing and load balancing.


Endpoints are the backend entities to which services route traffic. So when we have those three pods that we were looking at earlier, each one of those three pods represents an endpoint for the service.

Endpoints are just something you generally need to be aware of, and one of the ways that endpoints can be useful is they're an easy way to determine which pods a service is routing traffic to.

So if you need to know how many pods a service is routing traffic to, or which pods a service is routing traffic to, you can just look at that service's endpoints.

UseCase - 1 -> Using K8s Services
============

Create a deployment.

vi deployment-svc-example.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-svc-example
spec:
  replicas: 3
  selector:
    matchLabels:
      app: svc-example
  template:
    metadata:
      labels:
        app: svc-example
    spec:
      containers:
      - name: nginx
        image: nginx:1.19.1
        ports:
        - containerPort: 80
		
kubectl create -f deployment-svc-example.yml

kubectl get deployment


Create a ClusterIP Service to expose the deployment's Pods within the cluster network.

vi svc-clusterip.yml

apiVersion: v1
kind: Service
metadata:
  name: svc-clusterip
spec:
  type: ClusterIP
  selector:
    app: svc-example
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

kubectl create -f svc-clusterip.yml

kubectl get service

Get a list of the Service's endpoints.

kubectl get endpoints svc-clusterip

Create a busybox Pod to test your service.

vi pod-svc-test.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod-svc-test
spec:
  containers:
  - name: busybox
    image: radial/busyboxplus:curl
    command: ['sh', '-c', 'while true; do sleep 10; done']


kubectl create -f pod-svc-test.yml

kubectl get pod

Run a command within the busybox Pod to make a request to the service.

kubectl exec pod-svc-test -- curl svc-clusterip:80

You should see the Nginx welcome page, which is being served by one of the backend Pods created earlier using a
Deployment.


Create a NodePort Service to expose the Pods externally.


vi svc-nodeport.yml

apiVersion: v1
kind: Service
metadata:
  name: svc-nodeport
spec:
  type: NodePort
  selector:
    app: svc-example
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080	
	  
kubectl create -f svc-nodeport.yml

curl localhost:30080

open in a browser http:// Public IP address of Master Node:30080 ( Take the public IP from AWS console)

Test the service by making a request from your browser to http://<Control Plane Node Public IP>:30080 . You should see
the Nginx welcome page.	  




More Example on ServiceAccount
==============================

vi my-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
    name: my-serviceaccount
    namespace: development
automountServiceAccountToken: false

kubectl apply -f my-serviceaccount.yaml

kubectl get serviceaccounts -n development  ( you can see , new serviceaccount created in development namespace)

kubectl get roles -n development ( It will show how many roles are present in development namespace)


vi service-account-binding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: sa-pod-reader
    namespace: development
subjects:
    - kind: ServiceAccount
      name: my-serviceaccount 
      namespace: development
roleRef:
  kind: Role 
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io


kubectl apply -f service-account-binding.yaml

kubectl get rolebinding -n development

this way we can create service account and role binding for service account.

 

