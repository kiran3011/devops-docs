Docker Volume
--------------

Create a ubuntu ec2 instance -> t2.medium

apt-get update -y
apt  install docker.io
service docker status
service docker start
service docker status

docker --version


https://docs.docker.com/storage/


Image
======

- Images are small , portable , and disposable.
- Images only the packages required to provide the intended service of the image.
- it's best to be able to discard a container without worrying about losing important data. we don't want data to exist inside an container.



Managing Docker Volume
=======================

What is a Volume
-----------------

- To persist , or save , data generated by or used by a container  , use a volume.
- To share the same data between multiple containers , use a volume.



Create a centos  container and mount as /data as volume. create some file in mounted volume  and delete the container. and check if the files are still available.

- Special type of directory in a container typically referred to as a "data volume"

- Can be shared and reused among container
- Updates to an image won't affect a data volume.
- Data Volumea are persisted even after the container is deleted.
- Volumes are persisted on the Docker Host.


when my container removed or killed , i want my data to be stored in locally. we want our data should store somewhere persistantly. for this we have use Docker volume.



Docker has three options for containers to store files in the host machine, so that the files are persisted even after the container stops: volumes, and bind mounts and ephemeral storage or tmpfs Mount. 

bind mounts - It used to inject data from host machine to the container

If you’re running Docker on Linux you can also use a tmpfs mount

- Docker application should be stateless but with new orchestration software
- Solution -> mount folder from local machine into container as if it were a normal folder
- powerful abstraction
- Leverages ability to push data out of container to be saved into Network Attached Storage or any other storage technology.


docker volume --help

docker volume create testdata
docker volume ls

docker volume inspect testdata

docker run -d --name withvolume --mount source=testdata,destination=/root/volume nginx  ( src or dst can be used instead of source or destination)

docker ps
docker inspect withvolume | grep  Mounts -A 10

echo 'Hello from the testdata volume' > /var/lib/docker/volumes/testdata/_data/index.html

docker exec -it withvolume bash

pwd

cd /root/volume

ls -l

cat index.html

exit


docker volume rm testdata

docker volume ls

docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest

docker ps

Save the Data
--------------

- Committing changes and create new image that is not manageable
- If you remove file in Docker , you are doing it in top layer  - which is one writable
- You are not removing file , you are just hiding it
- File is in one of layers using space but it is not visible
- Docker records differences and layer itself is set of differences from previous stacked layer
- Instead of committing changes into new image , we are going to mount a folder from our docker host into container


create a folder  /home/data and then mount the mysql container to /home/data folder 

cd ..
Now you are in home directory

mkdir data ( create a data folder inside home)

docker run --name my-mysql-2 -v /home/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest

Now we are using a new flag -v followed by /home/data .now container is running in /home/data local folder

cd /home/data

ls ( you will able to see all the folder and files)

docker volume ls

docker volume is not limited to one container. replicate the -v tag as many times as you need in order to match the requirement.

docker inspect my-mysql-2

Another way of mounting between the  container and the host , just specifying the path inside the container

docker run --name my-mysql-3 -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest

docker volume ls

docker inspect my-mysql-3

verify the section "mount"

you will able to see -> "Destination": "/var/lib/mysql"


go to cd /var/lib/docker/volume ( Now you will see a meta.db which contain all the data)



docker volume ls

docker volume create basic-devops

docker volume create --name basic-devops
docker volume ls

Here we are creating first volume then mounting to a container

docker volume inspect basic-devops

now we will use the volume name to mount to the container

docker run --name my-mysql-4 -v basic-devops:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest

docker volume inspect basic-devops

Now you are creating a new docker container from another container using volume

docker run --name my-mysql-5 --volumes-from my-mysql-4 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:latest


Create a New Linux machine 

Start a container with a volume
--------------------------------

Create a volume and mount it on container when container is initiated.

docker run -d --name test-busybox -v vol-busybox:/app busybox

docker volume ls

docker inspect test-busybox  (inspect the container on which we have mounted volume)

under the mounts section , you will see all the different attributes related to this volume.

------------------------



Attach a Read-only volume to a container
----------------------------------------

docker volume ls

docker run -d --name test-busybox-3 -v vol-busybox:/app:ro busybox  ( A readonly volume is mounted, 
 -v <volume>:<containerdir>:ro

 docker volume ls
 docker inspect test-busybox-3 ( verify readonly status of the volume, RW value set to false)
 

 
 Cleaning up volumes : prune( Unused volume)
 --------------------------------------------
 
 docker volume prune ( it will delete all the volume which is not used or not attached to any container)
 
 
 Observing Changes to a volume
 ------------------------------
 
 docker volume create vol-ubuntu ( Create a new volume for ubuntu container)
 
 docker volume ls
 
 docker run -it -d -v vol-ubuntu:/tmp --name ubuntu-data ubuntu (  Create  a ubuntu container ( ubuntu-data) and mount vol-ubuntu on /tmp directory in container
 
 docker ps -a
 
 docker attach ubuntu-data ( Attach STDIN, STDOUT and STDERR to running container)
 
 now you are inside ubuntu container
 
 ls
 
 echo "This is a data container for ubuntu" > /tmp/msg.txt  ( Create a text file and save it in /tmp directory of container)
 
 cd /tmp
 ls ( text file is available in /tmp directory)
 
 exit ( exit from the container)
 
 docker inspect ubuntu-data
 
 see the source location inside the images
 
 Go to the source location
 
 Now you will able to see the msg.txt file
 
 
------------------------------------------------------ 
 docker-machine ssh default ( SSH to docker machine)
 
 cd /var/lib/docker/volumes-from
 
 ls
 
 you will able to see all the volume
 
 -------------------------------------------------
 
 
 Start a Container with a Bind Mount
 -----------------------------------
 
 docker volume ls
 
 docker run  -d -it --name test-busybox-5 --mount type=bind,source=/tmp,target=/app nginx  ( Start a container by mounting a host (source) directory on container's (target) directory
 
 docker ps
 
 docker inspect test-busybox-5 ( Type of mount is Bind)
 
 docker stop test-busybox-5
 
 docker rm test-busybox-5
  
 
 ===================================
 

 
 
 
 Working with Docker Volumes  ( Usecase - 2)
 ==========================
 
 you are working on a personal project  to host a website. You have a server running Docker and figure this would be a good use case to containerize the small HTML website. Create a Dockerfile that will use Nginx as the base image and set up two volumes: one volume for the HTML files and the second for logs. Then run the container using the image built from the Dockerfile.
 
 
 we need to create a Dockerfile that uses nginx as the base image with two volumes. This image will be used to create a Docker container.
 
 vi Dockerfile
 
FROM nginx
VOLUME /usr/share/nginx/html
VOLUME /var/log/nginx
WORKDIR /usr/share/nginx/html

Save the file

docker build -t la/nextgen:latest -f Dockerfile  .

docker images

Create a Volume for the HTML Files

docker volume create nginx-code  (Create a new volume called nginx-code)

Create a Volume for Nginx Logs

docker volume create nginx-logs  ( Create a second volume called nginx-logs)

docker volume ls


Create a Docker Container

docker run -d --name=nextgen-dev -p 80:80 --mount source=nginx-code,target=/usr/share/nginx/html --mount source=nginx-logs,target=/var/log/nginx la/nextgen:latest

docker ps

cd /var/lib/docker/volumes/

ls  ( you can see nginx-code and nging-logs)

cd nginx-code/_data/

ls ( you can see the index.html files)

vi index.html

modify the content  then save the file

Open in a browser in the Public IP address ( This should return the "Welcome to nginx!" web page.)


Usecase - 3 ( Volume) Data will still exist in the local if your container stopped.
=====================

1. create a directory that will acts as a mount point
  mkdir /data
  
2. Create a centos container and mounts this /data on it.

docker run --name c1 -it -v /data centos

3. In the centos c1 container go into the data folder  and create few files

cd /data
touch f1 f2 f3

exit

4. To idenetify the mounted location
docker inspect c1

search for "Mounts" section and copy the "source" path

/var/lib/docker/volumes/2d34a1f18568e9a91d3440a5b60607cc7df31a0f5083884469662ff43cc4ef40/_data

/var/lib/docker/volumes/fff7a06e0caade7d301d5d414c82f0f495306f13ce87e9058c5c4ff852e78c61/_data


5. Delete the container
docker rm -f c1

6. Check if the data created in volume is still present 

cd "source_path_copied_from_step4"

ls


Create a container from other volume  ( volumes_from)
====================================

create a centos container c1 and mount /data as a volume on it

docker run --name c1 -it -v /data centos  ( Now you are inside the container)

cd data 
ls

touch f1 f2

come out of the container without exit ( ctrl+p, ctrl+q)

Start another container

docker run --name c2 -it --volumes-from c1  centos  ( Now c2 container volume you are inside the container)
cd data
ls

touch f3 f4

come out of the container without exit ( ctrl+p, ctrl+q)

docker run --name c3 -it --volumes-from c2  centos 

cd data
ls

touch f5 f6

come out of the container without exit ( ctrl+p, ctrl+q)

docker attach c1

ls

exit from the container

docker inspect c1

search for the mount section and copy the "source" path

/var/lib/docker/volumes/7b67b1669d97a88e6ec6830bd0e4667eb46ca936a24d6dfaafadd4354e81f8e5/_data

 "Source": "/var/lib/docker/volumes/10b8fb4ec202dbe03e2bba21206ec79520c59cb4f954477f28c468f20811f90b/_data",
 
 /var/lib/docker/volumes/cbc8c2e1c9ccfda2f72027af558e8261415cb9bc5abe02d43ed9884a53398bb4/_data

docker rm -f c1 c2 c3

cd "source" path under the mount section  

ls ( still you will be able to see the data)




Usecase - 4
=============

Managing Docker Volumes - Exercise
-----------------------------------

docker volume create localvolume

docker volume inspect localvolume  (will store the contents of the volume on your local Docker host's filesystem.)

Create a text file named "file.txt" in the volume with the contents of "This file exists".

echo "This file exists" > /var/lib/docker/volumes/localvolume/_data/file.txt

Run a Container and Attach the Volume to It
-------------------------------------------

Start a detached container using the Apache image named "httpd". Mount the volume named "localvolume" inside the container at "/data".

docker run -d --name mountvolume --mount src=localvolume,dst=/data httpd

Attach to the "mountvolume" container.

docker exec -it mountvolume /bin/bash

Check that the volume is available inside of the container and that the "file.txt" exists.

df -h
cat /data/file.txt   ( Ensure that the contents of "/data/file.txt" is "This file exists”.)


Create a new file on the volume named "from-container.txt" with the contents of "Created from
inside the container".

echo "Created from inside the container" > /data/from-container.txt

Confirm the file was created and that it's contents are as expected:

cat /data/from-container.txt

exit

Confirm that you can see the file from the Docker host.

cat /var/lib/docker/volumes/localvolume/_data/from-container.txt


Run a Container with an Ephemeral Volume
----------------------------------------

Start a container named "tempvolume" in the background. Use the "httpd" image. Also, attach an
ephemeral volume to the container at "/tempdata". You'll need to use type "tmpfs" as the volume
type.

docker run -d --name tempvolume --mount type=tmpfs,dst=/tempdata httpd

docker inspect tempvolume | grep Mounts -A 10

Ensure that the "Type" field shows "tmpfs" and that the "Destination" field shows "/tempdata" as the
path.








 docker pull mysql:5.7
 
 docker inspect mysql:5.7
 
 docker run --name my-mysql-6 -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3030:3306 -d mysql:5.7
 
 docker exec -it my-mysql-6 /bin/bash