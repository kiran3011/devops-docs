Jenkins Pipeline
----------------

- Jenkins Pipelines allows you to write the Jenkins build steps in  code 

  1. Build steps allow you to write build(compile) , test , deploy in code
  2. Code means you can put this code in version contol
  
  It is about automating this cycle
  
  Developer -> Build -> Test -> Release -> Provision Deploy -> Prodcution

- A suite of plugins that support continuous delivery pipelines

- They provide tools for modeling delivery pipelines as code

- Definition is written into text file called  ' Jenkinsfile'

Benefits of Pipeline
--------------------

- Automatically creates a pipeline build process
- Code review of the pipeline
- Audit trail of the pipeline
- Single source of truth

Declarative Vs Scripted Pipeline
--------------------------------

Jenkinsfile can be written using:

-- Declarative
-- Scripted

Declarative is a more recent features

-- provide rich syntactical features
-- designed to make reading and writing Pipelines easier


Why Pipeline
-------------

Pipeline add a powerful set of automation tools onto jenkins

Features of Pipeline are

 -- Pipelines are implemented in code
 -- Pipelines support complex real-world CD requirements
 -- Pipelines can survive both planned and unplanned restarts
 -- Pipelines plugin supports custom extensions
 -- pipelines can stop and wait
 
 Pipelines Concept
 -----------------
 
 Pipeline -> it is a used defined model of a continuous delivery pipeline. It includes different stages of the application, testing and delivering it.
 
 Node -> It represents a machine which is part of jenkins environment and a capable of executing a pipeline.
 
 Stage -> A stage block defines a conceptually distinct subset of tasks perform through the entire pipeline.It may be build , test or deploy stages.
 
 step - It represents a single task fundamentally a step tells jenkins what to do at a particular point in time. 
 
 
 Verify "BuildPipelinePlugin"  is installed in machine
 
 manage jenkins -> plugin manager
 
 
 
 Go to Jenkin and create  a New item
 
 Declarative Pipeline syntax
 ----------------------------
 
 Item name - pipeline
  choose "pipeline" in the below section
  
  click on save
  
  click on Pipeline Tab and enter below code
 
 pipeline {
      agent any
	  stages {
	    stage('Build') {
		   steps {
		      echo "Hello World"
			  }
             }
		stage('Test') {
		   steps {
		      echo "Welcome to Test"
			  }
             }	 
        stage('Deploy') {
		   steps {
		      echo "Welcome to Deploy"
			  }
             }	     
	}	}	  
	
	

 Scripted Pipeline syntax
 ----------------------------
 
 node{
 
 stage('Build') {
 }
 
  stage('Test)
 }
 
  stage('Deploy') {
 }
 }
 
 

 
 
 
 Simple Pipeline
 -----------------
 
 Pipeline can be created in any of the following ways
 
 - Blue Ocean
 - Through Classic UI
 - In SCM
 
 using Classic UI
 ----------------
 
 create a New Job - pipeline-test and choose the pipeline
 click on create
 
 click on pipeline Tab
 Defination -> pipeline
 
 pipeline {
      agent any
	  stages {
	    stage('Stage1') {
		   steps {
		      echo "Hello World"
			  }
             }
		}
    }		
	
click on Build Now.

-------------------------------------

Building a project with jenkins pipeline (Using classic UI)
----------------------------------------


create a New Job - pipeline-test and choose the pipeline
 click on create
 
 check the Github project -> https://github.com/kiran3011/springExample

 click on pipeline Tab
 Definition -> pipeline
 
 
	pipeline {
      agent any
	  stages {
	    stage('Build') {
		   steps {
		      sh "rm -rf springExample"
		      sh "git clone https://github.com/kiran3011/springExample"
			  sh "mvn clean -f springExample"
			  }
             }
		stage('Test') {
		   steps {
		      sh "mvn test -f  springExample"
		      echo "Welcome to Test"
			  }
             }	 
        stage('Deploy') {
		   steps {
		      sh "mvn package -f  springExample"
		      echo "It is going to package the project"
			  }
             }	     
	}	}	  
	
	
click on build now. see the console output

	
################################################################3

Building a  pipeline with jenkinsfile
----------------------------------------	

jenkinsfile

- Complex pipelines are difficult to write and maintain
- You can write Jenkinsfile in an IDE and commit to source control



Go to github and create a file called -> Jenkinsfile


pipeline {
      agent any
	  stages {
	    stage('Build') {
		   steps {
		      sh "rm -rf springExample"
		      sh "git clone https://github.com/awsdevops009/springExample.git"
			  sh "mvn clean "
			  }
             }
		stage('Test') {
		   steps {
		      sh "mvn test -f  springExample"
		      echo "Welcome to Test"
			  }
             }	 
        stage('Deploy') {
		   steps {
		      sh "mvn package -f  springExample"
		      echo "It is going to package the project"
			  }
             }	     
	}	}	  

	commit to the master branch
	

create a New Job - pipeline-test and choose the pipeline
 click on create
 
 
 
 click on pipeline Tab
 Defination -> pipeline	script from SCM
 
 SCM - Git
 
 Repository URL - https://github.com/awsdevops009/springExample.git
 
 Branchs to build
 
 script path -> Jenkinsfile ( we need to provide the path)
 
 click on build now
 
 
  Build Pipeline using Jenkins file
 --------------------------------
 
 https://github.com/awsdevops009/Jenkins_project_Maven.git
 
 
 Install  "Build Pipeline 
 
 manage jenkins - Plugin manager
 
 Go to Jenkins Dashboard
 
 Create a New Item - sample_CodePipeline

 choose - pipeline
 
 select Poll SCM - * * * * *
 
 Pipeline
 
 Defination - Pipeline script from SCM
 
 SCM - Git
 
 Repository URL - https://github.com/awsdevops009/Jenkins_project_Maven.git
 
 
 Branchs - 
 
 script path - jenkinsfile
 
 Save the file
 
 Do a Build Now
 
 Clone the code to your D Drive
 
 git clone https://github.com/awsdevops009/Jenkins_project_Maven.git
 
 Do the modification in the code and push the code into master branch
 
 Jenkins job will do the build every 1 minute from Poll SCM
 
 
 
 Jenkins File using Pipeline
 ============================
 
 https://github.com/awsdevops009/jenkins_pipeline.git
 
 Create a new Job - Pipeline_code
 choose pipleline
 
 select the "hello world" from the dropdown declarative pipeline
 
 select "scripted Pipeline" from the dropdown
 
 click on "Pipeline syntax"  , it will open a new tools
 
 click on "Declarative Directive Generator" 
 sample Directive -> tools:Tool
 
 click on Add
 click on Generate Declarative  Directive
 
 It will show the syntax , how to use the command
 
 
 Defination -> pipeline script from SCM
 
 SCM - Git
 
 Repository URL -  https://github.com/awsdevops009/jenkins_pipeline.git
 
 Branchs specific - */pipeline
 
 
 Build Now
 
 
 Multi Branch Pipeline
 =====================
 
 It will scan all the branchs and it will look for jenkinsfile and where he will get jenkinsfile , then he will do the build.
 
 Create a new Job - Pipeline_multi
 choose multibranch pipeline
 
 Branchs source - Git
 Project Repository - https://github.com/awsdevops009/jenkins_pipeline.git  
 
 
 
 =====================================================
 
 
 Pipeline
 
https://github.com/awsdevops009/SeleniumWithCucucumber.git
 
 
 Create a Pipeline Job
 job- pipeline_test
 
 Click on pipeline Syntax
 
 git:git
 
 step : bat windows batch script
 
 none allcation
 label master
 
 
 git 'https://github.com/awsdevops009/SeleniumWithCucucumber.git'
 
  mvn verify
 
node('master') {
    // some block
}
 
 
 node('master') {
 
	git 'https://github.com/awsdevops009/SeleniumWithCucucumber.git'
 
	bat 'mvn verify'
	}
 
 
 ###################################################
 
 Using Environment Variable
 ---------------------------
 
 - jenkins exposes environment variables through the variable 'env'
 - Entire list of environment variables is accessible from <IP address>:8080/pipeline-syntax/global;s#env


Setting Environment  Variable
-----------------------------

Declarative Pipeline
 - use 'environment' directive
 
 Scripted Pipeline
  - use 'withEnv' step
  
 environment directive in top-level pipeline block will apply to all steps
 environment' directive within a stage will apply within the stage
 
 pipeline {
      agent any
	  environment{
	      mainenv = 'test'
		  }
	  stages {
	    stage('Stage1') {
		environment{
	      subenv = 'test1'
		  }
		   steps {
		      echo mainenv
			  echo subenv
			  }
             }
		}
    }	

	
	
	
Jenkins Pipeline Example	
-----------------------------------

node {
  def mvnHome
  stage('Preparation') {
     git â€˜https://github.com/wardviaene/java-demo.git'
     // Get the Maven tool.
    // ** NOTE: This 'M3' Maven tool must be configured
    // ** in the global configuration.
    mvnHome = tool 'M3'
}

  stage('Build') {
     // Run the maven build
     if (isUnix()) {
        sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore
clean package"
      } else {
         sh(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore
clean package/)
	}
 }
 stage('Results') {
    junit '**/target/surefire-reports/TEST-*.xml'
    archive 'target/*.jar'
 }
}

-----------------------------------------------	
	
	
	

Sample pipeline script
-----------------------

node('master') {
    stage('scm') {
        checkout([$class: 'GitSCM', 
          branches: [[name: '*/master']], 
          doGenerateSubmoduleConfigurations: false, 
          extensions: [], 
          submoduleCfg: [], 
          userRemoteConfigs: [[credentialsId: 'e50f564f-fbb7-4660-9c95-52dc93fa26f7', 
          url: 'https://developer@bitbucket.org/projects/springpocrepo.git']]])
    }
 
    stage('build') {
        withMaven(jdk: 'JDK9.0.1', maven: 'Maven3.5.2') {
            sh 'mvn clean install'
        }
    }
}


Jenkinsfile content
-------------------

node('master') {
    stage('scm') {
        checkout scm
    }
    stage('build') {
        withMaven(jdk: 'JDK9.0.1', maven: 'Maven3.5.2') {
            sh 'mvn clean install'
        }
    }
}

This script is almost the same as the pipeline script that we created in the earlier section, with just one modification. The statement in stage(â€˜scm') doesn't need the URL and user credentials information. Instead, all it needs is checkout scm.	